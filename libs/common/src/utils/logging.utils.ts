import { Logger } from '@nestjs/common';

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export class LoggingUtils {
  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å —ç–º–æ–¥–∑–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–º
   */
  static logOperation(
    logger: Logger,
    operation: string,
    details: string,
    status: 'start' | 'success' | 'error' = 'start'
  ): void {
    const emoji =
      status === 'success' ? '‚úÖ' : status === 'error' ? '‚ùå' : 'üöÄ';
    logger.log(`${emoji} ${operation}: ${details}`);
  }

  /**
   * –£—Å–ª–æ–≤–Ω–æ–µ debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)
   */
  static debugIf(logger: Logger, condition: boolean, message: string): void {
    if (condition && process.env.NODE_ENV === 'development') {
      logger.debug(message);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
   */
  static logError(
    logger: Logger,
    operation: string,
    error: Error,
    context?: Record<string, any>
  ): void {
    const contextStr = context ? ` | Context: ${JSON.stringify(context)}` : '';
    logger.error(
      `‚ùå ${operation} failed: ${error.message}${contextStr}`,
      error.stack
    );
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
   */
  static logWarning(
    logger: Logger,
    operation: string,
    message: string,
    context?: Record<string, any>
  ): void {
    const contextStr = context ? ` | Context: ${JSON.stringify(context)}` : '';
    logger.warn(`‚ö†Ô∏è ${operation}: ${message}${contextStr}`);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  static generateOperationId(
    prefix: string,
    ...identifiers: (string | number)[]
  ): string {
    return `${prefix}-${Date.now()}-${identifiers.join('-')}`;
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  static logStats(
    logger: Logger,
    operation: string,
    stats: Record<string, any>
  ): void {
    logger.log(`üìä ${operation} stats: ${JSON.stringify(stats)}`);
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç WebSocket —Å–æ–±—ã—Ç–∏—è
   */
  static logWebSocketEvent(
    logger: Logger,
    event: string,
    clientId: string,
    data?: any
  ): void {
    const dataStr = data ? ` | Data: ${JSON.stringify(data)}` : '';
    logger.log(`üîå WebSocket ${event} | Client: ${clientId}${dataStr}`);
  }
}
